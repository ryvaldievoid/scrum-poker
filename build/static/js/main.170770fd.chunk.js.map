{"version":3,"sources":["containers/Login/banner.png","card_background.png","FirebaseConfig.js","containers/Login/Login.js","components/Card/Back/Back.js","components/Card/Front/Front.js","components/Card/Card.js","components/Cards/Cards.js","containers/Lobby/Lobby.js","Router.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","Login","props","getData","setState","loading","ref","database","state","room_name","listener","on","snapshot","off","data","val","rooms","status","name","history","push","createRoom","set","creator","sessions","story","team_member","story_point","handleSubmit","event","preventDefault","handleInputChange","target","value","className","src","banner","alt","autoComplete","onSubmit","this","style","marginTop","type","placeholder","required","onChange","height","width","marginBottom","console","log","React","Component","Back","objectFit","cardBackground","Front","card","dangerouslySetInnerHTML","__html","Card","handleClick","point","members","map","member","update","Cards","cards","key","onClick","fibonacciCard","Lobby","button_status","stringRef","location","updateUserStory","user_story","isCreator","static_member","joinRoom","filterMembers","filter","textAlign","color","backgroundColor","margin","fontSize","index","fontWeight","Router","exact","path","component","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.170770fd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/banner.4e801b40.png\";","module.exports = __webpack_public_path__ + \"static/media/card_background.b58fb036.png\";","import firebase from 'firebase';\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyBnJf39lB5wjEc6CxHWMhOgauOUZurKKc8\",\n    authDomain: \"scrum-poker-8410b.firebaseapp.com\",\n    databaseURL: \"https://scrum-poker-8410b.firebaseio.com\",\n    projectId: \"scrum-poker-8410b\",\n    storageBucket: \"scrum-poker-8410b.appspot.com\",\n    messagingSenderId: \"776481092580\",\n    appId: \"1:776481092580:web:d5981806e91221e5ad8df1\",\n    measurementId: \"G-X60WV364K1\"\n};\n\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase;\n","import React from 'react';\nimport '../../App.css';\nimport banner from './banner.png';\nimport firebase from '../../FirebaseConfig';\n\nclass Login extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading: false,\n            room_name: '',\n            name: '',\n            status: '',\n            rooms: [],\n        };\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <div>\n                        <img src={banner} className=\"App-logo\" alt=\"logo\" />\n                        <h1>Scrum Poker Online</h1>\n                        <p>Enter or Create a Room Here:</p>\n                        <form className=\"login-form\" autoComplete=\"off\" onSubmit={this.handleSubmit}>\n                            <div className=\"form-row\">\n                                <div style={{ marginTop: '13px' }}>\n                                    <input type=\"text\" ref='room_name' name='room_name' className=\"form-control\" placeholder=\"Room Name\" required onChange={this.handleInputChange} style={{ height: '32px', width: \"70%\" }} />\n                                </div>\n                                <div style={{ marginTop: '13px', marginBottom: '13px' }}>\n                                    <input type=\"text\" ref='name' name='name' className=\"form-control\" placeholder=\"Name\" required onChange={this.handleInputChange} style={{ height: '32px', width: \"70%\" }} />\n                                </div>\n                            </div>\n                            <button type=\"submit\" className=\"btn btn-primary\">Submit</button>\n                        </form>\n                    </div>\n                </header>\n            </div>\n        );\n    }\n\n    getData = () => {\n        this.setState.loading = true;\n        let ref = firebase.database().ref(this.state.room_name);\n        let listener = ref.on('value', snapshot => {\n            ref.off('value', listener);\n            let data = snapshot.val();\n            this.setState({ loading: false, rooms: data });\n            if (data !== null && this.state.room_name !== '') {\n                // join room\n                this.setState({ status: 'join' });\n                const { room_name, name, status } = this.state;\n                this.props.history.push('/lobby', { room_name, name, status });\n            } else {\n                // alert('Create or Enter a room name first!');\n                // create room\n                this.createRoom();\n                this.setState({ status: 'create' });\n                const { room_name, name, status } = this.state;\n                this.props.history.push('/lobby', { room_name, name, status });\n            }\n        })\n    }\n\n    createRoom = () => {\n        firebase.database().ref(this.state.room_name).set({\n            creator: this.state.name,\n            sessions: false,\n            story: 'Your user story',\n            team_member: [{\n                name: this.state.name,\n                story_point: '',\n                status: false\n            }]\n        });\n    }\n\n    handleSubmit = (event) => {\n        event.preventDefault();\n        this.getData();\n    }\n\n    handleInputChange = (event) => {\n        const { name, value } = event.target;\n        this.setState({ [name]: value });\n    };\n\n    componentDidMount() {\n        if (this.state.room_name === '') {\n            // Login first\n            console.log('login dulu');\n        } else {\n            // Check room\n            console.log('udah login');\n            this.getData();\n        }\n    }\n\n}\n\nexport default Login;\n","import React from 'react';\nimport cardBackground from '../../../card_background.png';\nimport './Back.css';\n\nconst Back = () => (\n  <div className=\"card\">\n    <div className=\"card__points\">\n      <img style={{objectFit: 'scale-down', width: '80px', height: '100px'}} src={cardBackground} alt=\"logo\" />\n    </div>\n  </div>\n);\n\nexport default Back;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './Front.css';\n\nconst Front = ({ card }) => (\n  <div className=\"card\">\n    <div className=\"card__points\">\n      <span dangerouslySetInnerHTML={ { __html: card } } />\n    </div>\n  </div>\n);\n\nFront.propTypes = {\n  card: PropTypes.string.isRequired,\n};\n\nexport default Front;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Back from './Back';\nimport Front from './Front';\n\nconst Card = (props) => props.card ? <Front { ...props } /> : <Back />;\n\nCard.propTypes = {\n  card: PropTypes.string.isRequired,\n};\n\nexport default Card;\n","import React from 'react';\nimport Card from '../Card';\nimport './Cards.css';\nimport firebase from '../../FirebaseConfig';\n\nconst Cards = ({ cards, room_name, name, sessions, team_member }) => (\n  <div className=\"centerDiv\">\n    <ul className=\"cards\">\n      {\n        cards.map((card) => (\n          <li className=\"cards__card\" key={card} onClick={(event) => handleClick(event, card, room_name, name, sessions, team_member)}>\n            <Card card={card} />\n          </li>\n        ))\n      }\n    </ul>\n  </div>\n);\n\nconst handleClick = (event, point, room_name, name, sessions, team_member) => {\n  event.preventDefault();\n  if (!sessions && team_member !== null) {\n    let members = [];\n    team_member.map(member => (\n      member.name !== name ? (members.push(member)) : (members.push({name: name, story_point: point, status: true}))\n    ));\n    firebase.database().ref(room_name).update({ team_member: members });\n    console.log(\"coba click kartu: \" + point);\n  }\n};\n\nexport default Cards;","import React from 'react';\nimport firebase from '../../FirebaseConfig';\nimport Cards from '../../components/Cards';\nimport Card from '../../components/Card';\n\nconst fibonacciCard = ['0', '1/2', '1', '2', '3', '5', '8', '13', '21', '?', 'Coffe?'];\n\nclass Lobby extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      button_status: 'Reveal Cards',\n      team_member: [],\n      static_member: [],\n      story: '',\n      isCreator: false,\n      sessions: false\n    };\n  }\n\n  render() {\n    return (\n      <div className=\"App-header\">\n        <h3>The story goes like this:</h3>\n        {\n          this.state.isCreator ? (\n            <input type=\"text\" ref='user_story' name='user_story' className=\"Input-text\" placeholder={\n              this.state.story === \"\" ? (\n                \"Your user story goes here\"\n              ) : (\n                  this.state.story\n                )\n            } onChange={this.handleInputChange} />\n          ) : (\n              <p style={{textAlign:'center'}}>{this.state.story}</p>\n            )\n        }\n        {\n          this.state.isCreator ? (\n            <button type=\"submit\" className=\"btn btn-primary\" onClick={this.handleSubmit}>{this.state.button_status}</button>\n          ) : ('')\n        }\n        <hr style={{ color: 'white', backgroundColor: 'white', height: .5, width: '100%' }} />\n        <div style={{ margin: '5px' }}>\n          <p style={{ fontSize: '14px' }}>Room Name: {this.props.location.state.room_name}</p>\n        </div>\n        <div className=\"centerDiv\">\n          <ul>\n            {\n              this.state.team_member.map((member, index) =>\n                <li className=\"cards__card\" key={member.name}>\n                  {/* <Card card={member.name} /> */}\n                  <Card card={member.name === this.props.location.state.name\n                    || this.state.sessions ? (member.story_point === '' ? (member.name) : (member.story_point)) : ('')} />\n                  <p style={\n                    member.status ? (\n                      { color: 'white', fontWeight: 'bold' }\n                    ) : (\n                        { color: 'grey' }\n                      )\n                  }>{member.name}</p>\n                </li>\n              )\n            }\n          </ul>\n        </div>\n        <hr style={{ color: 'white', backgroundColor: 'white', height: .5, width: '100%' }} />\n        <Cards cards={fibonacciCard} room_name={this.props.location.state.room_name}\n          name={this.props.location.state.name}\n          sessions={this.state.sessions}\n          team_member={this.state.team_member} />\n      </div>\n    );\n  }\n\n  handleSubmit = (event) => {\n    // event.preventDefault();\n    let sessions = this.state.button_status === 'Reveal Cards';\n    let stringRef = this.props.location.state.room_name;\n    firebase.database().ref(stringRef).update({ sessions: sessions });\n    if (sessions) {\n      let members = [];\n      this.state.team_member.map(member => (members.push({ name: member.name, story_point: member.story_point, status: false })));\n      firebase.database().ref(stringRef).update({ team_member: members });\n      this.setState({ button_status: 'Reset' });\n    } else {\n      this.setState({ button_status: 'Reveal Cards' });\n    }\n  }\n\n  handleInputChange = (event) => {\n    const { value } = event.target;\n    this.updateUserStory(value);\n  }\n\n  updateUserStory = (user_story) => {\n    let stringRef = this.props.location.state.room_name;\n    firebase.database().ref(stringRef).update({ story: user_story });\n  }\n\n  getData = () => {\n    let ref = firebase.database().ref(this.props.location.state.room_name);\n    ref.on('value', snapshot => {\n      const team_member = snapshot.val()['team_member'];\n      this.setState({\n        team_member: team_member, story: snapshot.val()['story']\n        , isCreator: snapshot.val()['creator'] === this.props.location.state.name, sessions: snapshot.val()['sessions']\n      });\n      if (this.state.isCreator) {\n        this.setState({button_status: this.state.sessions ? ('Reset'):('Reveal Cards')})\n      }\n      if (!snapshot.val()['sessions']) {\n        this.setState({ static_member: team_member });\n      }\n    });\n  }\n\n  joinRoom = () => {\n    let stringRef = this.props.location.state.room_name + '/team_member';\n    let ref = firebase.database().ref(stringRef);\n    let listener = ref.on('value', snapshot => {\n      ref.off('value', listener);\n      const team_member = [];\n      let data = snapshot.val();\n      if (data !== null) {\n        data.map(({ name, story_point, status }) => (team_member.push({ name, story_point, status })));\n      }\n      team_member.push({\n        name: this.props.location.state.name,\n        story_point: '',\n        status: false\n      });\n      const filterMembers = team_member.filter((member) => !team_member[member.name] && (team_member[member.name] = true));\n      firebase.database().ref(stringRef).update(filterMembers);\n    });\n  }\n\n  componentDidMount() {\n    let prevState = this.props.location.state;\n    if (prevState.status === 'join') {\n      this.joinRoom();\n    }\n    this.getData();\n  }\n\n}\n\nexport default Lobby;\n","import React from 'react';\nimport { Route, BrowserRouter, Switch, } from 'react-router-dom';\nimport { Login, Lobby } from './containers';\n\nconst Router = () => (\n  <BrowserRouter>\n    <Switch>\n      <Route exact path=\"/\" component={Login} />\n      <Route path=\"/lobby\" component={Lobby} />\n    </Switch>\n  </BrowserRouter>\n);\n\nexport default Router;","import React from 'react';\nimport Router from './Router';\nimport './App.css';\n\nconst App = (props) => (\n  <Router { ...props } />\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}